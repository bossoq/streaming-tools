version: v1beta11

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
  - name: IMAGE
    value: ghcr.io/bossoq/streaming-tools/streaming-tools
  - name: DEVSPACE_PROFILE
    value: ${devspace.profile}

# These vars will only be used in production profile
  - name: DEV_GUILD_ID
    source: command
    command: ./devspace_dotenv.js
    args: ["DEV_GUILD_ID", "${devspace.profile}"]
  - name: DISCORD_TOKEN
    source: command
    command: ./devspace_dotenv.js
    args: ["DISCORD_TOKEN", "${devspace.profile}"]
  - name: DISCORD_CLIENT_ID
    source: command
    command: ./devspace_dotenv.js
    args: ["DISCORD_CLIENT_ID", "${devspace.profile}"]
  - name: DISCORD_CLIENT_SECRET
    source: command
    command: ./devspace_dotenv.js
    args: ["DISCORD_CLIENT_SECRET", "${devspace.profile}"]
  - name: DISCORD_BOTLOG_CHANNEL
    source: command
    command: ./devspace_dotenv.js
    args: ["DISCORD_BOTLOG_CHANNEL", "${devspace.profile}"]
  - name: DISCORD_ANNOUNCE_CHANNEL
    source: command
    command: ./devspace_dotenv.js
    args: ["DISCORD_ANNOUNCE_CHANNEL", "${devspace.profile}"]
  - name: SUPABASE_URL
    source: command
    command: ./devspace_dotenv.js
    args: ["SUPABASE_URL", "${devspace.profile}"]
  - name: SUPABASE_KEY
    source: command
    command: ./devspace_dotenv.js
    args: ["SUPABASE_KEY", "${devspace.profile}"]
  - name: TABLE
    source: command
    command: ./devspace_dotenv.js
    args: ["TABLE", "${devspace.profile}"]
  - name: TWITCH_TABLE
    source: command
    command: ./devspace_dotenv.js
    args: ["TWITCH_TABLE", "${devspace.profile}"]
  - name: YOUTUBE_CHANNEL_ID
    source: command
    command: ./devspace_dotenv.js
    args: ["YOUTUBE_CHANNEL_ID", "${devspace.profile}"]
  - name: ABLY_KEY
    source: command
    command: ./devspace_dotenv.js
    args: ["ABLY_KEY", "${devspace.profile}"]
  - name: TWITCH_CALLBACK_URL
    source: command
    command: ./devspace_dotenv.js
    args: ["TWITCH_CALLBACK_URL", "${devspace.profile}"]
  - name: YOUTUBE_CALLBACK_URL
    source: command
    command: ./devspace_dotenv.js
    args: ["YOUTUBE_CALLBACK_URL", "${devspace.profile}"]
  - name: COIN_FLIP_RATE
    source: command
    command: ./devspace_dotenv.js
    args: ["COIN_FLIP_RATE", "${devspace.profile}"]
  - name: COIN_FLIP_THRESHOLD
    source: command
    command: ./devspace_dotenv.js
    args: ["COIN_FLIP_THRESHOLD", "${devspace.profile}"]
  - name: PORT
    source: command
    command: ./devspace_dotenv.js
    args: ["PORT", "${devspace.profile}"]

# `deployments` tells DevSpace how to deploy this project
deployments:
  - name: streaming-tools
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying the so-called Component Chart: https://devspace.sh/component-chart/docs
      componentChart: true
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
        service:
          ports:
            - port: 9876

# `dev` only applies when you run `devspace dev`
dev:
  # `dev.ports` specifies all ports that should be forwarded while `devspace dev` is running
  # Port-forwarding lets you access your application via localhost on your local machine
  ports:
    - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
      forward:
        - port: 9876

  # `dev.open` tells DevSpace to open certain URLs as soon as they return HTTP status 200
  # Since we configured port-forwarding, we can use a localhost address here to access our application
  open:
    - url: http://localhost:9876

  # `dev.sync` configures a file sync between our Pods in k8s and your local project files
  sync:
    - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
      # `excludePaths` option expects an array of strings with paths that should not be synchronized between the
      # local filesystem and the remote container filesystem. It uses the same syntax as `.gitignore`.
      excludePaths:
        - .git/
      uploadExcludePaths:
        - Dockerfile
        - node_modules/
        - .env*

  # `dev.terminal` tells DevSpace to open a terminal as a last step during `devspace dev`
  terminal:
    imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
    # With this optional `command` we can tell DevSpace to run a script when opening the terminal
    # This is often useful to display help info for new users or perform initial tasks (e.g. installing dependencies)
    # DevSpace has generated an example ./devspace_start.sh file in your local project - Feel free to customize it!
    command:
      - ./devspace_start.sh

  # Since our Helm charts and manifests deployments are often optimized for production,
  # DevSpace let's you swap out Pods dynamically to get a better dev environment
  replacePods:
    - imageSelector: ${IMAGE} # Select the Pod that runs our `${IMAGE}`
      # Since the `${IMAGE}` used to start our main application pod may be distroless or not have any dev tooling, let's replace it with a dev-optimized image
      # DevSpace provides a sample image here but you can use any image for your specific needs
      replaceImage: loftsh/typescript:latest
      # Besides replacing the container image, let's also apply some patches to the `spec` of our Pod
      # We are overwriting `command` + `args` for the first container in our selected Pod, so it starts with `sleep 9999999`
      # Using `sleep 9999999` as PID 1 (instead of the regular ENTRYPOINT), allows you to start the application manually
      patches:
        - op: replace
          path: spec.containers[0].command
          value:
            - sleep
        - op: replace
          path: spec.containers[0].args
          value:
            - "9999999"
        - op: remove
          path: spec.containers[0].securityContext

# `profiles` lets you modify the config above for different environments (e.g. dev vs production)
profiles:
  # This profile is called `production` and you can use it for example using: devspace deploy -p production
  # We generally recommend using the base config without any profiles as optimized for development (e.g. image build+push is disabled)
  - name: production
  # This profile adds our image to the config so that DevSpace will build, tag and push our image before the deployment
    merge:
      images:
        app:
          image: ${IMAGE} # Use the value of our `${IMAGE}` variable here (see vars above)
          dockerfile: ./Dockerfile
    patches:
      - op: replace
        path: deployments.name=streaming-tools.helm.values.containers.image=${IMAGE}.env
        value:
          - name: DEV_GUILD_ID
            value: "$!{DEV_GUILD_ID}"
          - name: DISCORD_TOKEN
            value: "$!{DISCORD_TOKEN}"
          - name: DISCORD_CLIENT_ID
            value: "$!{DISCORD_CLIENT_ID}"
          - name: DISCORD_CLIENT_SECRET
            value: "$!{DISCORD_CLIENT_SECRET}"
          - name: DISCORD_BOTLOG_CHANNEL
            value: "$!{DISCORD_BOTLOG_CHANNEL}"
          - name: DISCORD_ANNOUNCE_CHANNEL
            value: "$!{DISCORD_ANNOUNCE_CHANNEL}"
          - name: SUPABASE_URL
            value: "$!{SUPABASE_URL}"
          - name: SUPABASE_KEY
            value: "$!{SUPABASE_KEY}"
          - name: TABLE
            value: "$!{TABLE}"
          - name: TWITCH_TABLE
            value: "$!{TWITCH_TABLE}"
          - name: YOUTUBE_CHANNEL_ID
            value: "$!{YOUTUBE_CHANNEL_ID}"
          - name: ABLY_KEY
            value: "$!{ABLY_KEY}"
          - name: TWITCH_CALLBACK_URL
            value: "$!{TWITCH_CALLBACK_URL}"
          - name: YOUTUBE_CALLBACK_URL
            value: "$!{YOUTUBE_CALLBACK_URL}"
          - name: COIN_FLIP_RATE
            value: "$!{COIN_FLIP_RATE}"
          - name: COIN_FLIP_THRESHOLD
            value: "$!{COIN_FLIP_THRESHOLD}"
          - name: PORT
            value: "$!{PORT}"
